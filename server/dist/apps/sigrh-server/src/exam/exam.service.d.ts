import { HttpException } from '@nestjs/common';
import { Exam, ExamDocument } from './exam.dto';
import { Model } from 'mongoose';
import { DbParserService } from '@sigrh/db-parser';
import { RepositoryService } from '../repository/repository.service';
import { CenterService } from './center/center.service';
import { CandidatService } from '../candidat/candidat.service';
import { ReportService } from '../consumers/report/report.service';
import { RepartitionService } from './repartition/repartition.service';
import { ScoreService } from '../consumers/score/score.service';
import { QrcodeService } from '../consumers/qrcode/qrcode.service';
import { WsGateway } from '@sigrh/websocket';
import { ISimulationPayload } from './exam.types';
import { ScorePayload } from '../consumers/score/score.types';
export declare class ExamService extends RepositoryService<Exam> {
    protected readonly model: Model<ExamDocument>;
    protected dbParser: DbParserService;
    private centerService;
    private candidatService;
    private report;
    private repartitionService;
    private scoreService;
    private qrcodeService;
    private readonly ws;
    private score;
    constructor(model: Model<ExamDocument>, dbParser: DbParserService, centerService: CenterService, candidatService: CandidatService, report: ReportService, repartitionService: RepartitionService, scoreService: ScoreService, qrcodeService: QrcodeService, ws: WsGateway, score: ScoreService);
    one(id: string): Promise<any>;
    getField(id: string): Promise<any>;
    createRepartition(id: string): Promise<HttpException | import("./center/center.dto").Center>;
    getRepartition(exam: string, departement: string): Promise<any>;
    downloadPdf(data: string, format?: any): Promise<any>;
    downloadXlsx(data: Record<string, string>[]): Promise<any>;
    activeStep(id: string, step: string): Promise<import("mongodb").UpdateResult>;
    gotoNextStep(id: string): Promise<void>;
    addScore(payload: ScorePayload): Promise<void>;
    getScoreResults(exam: string, sort?: 'ASC' | 'DESC'): Promise<any[]>;
    countInsertedScores(exam: string, field: string): Promise<any>;
    simulate(exam: string, sort: 'ASC' | 'DESC', payload: ISimulationPayload): Promise<void>;
}
